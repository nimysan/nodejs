{
  "name": "express-paginate",
  "version": "0.0.5",
  "description": "Node.js pagination middleware and view helpers",
  "main": "./index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/niftylettuce/express-paginate.git"
  },
  "author": {
    "name": "Nick Baugh",
    "email": "niftylettuce@gmail.com"
  },
  "contributors": [
    {
      "name": "Esco Obong",
      "email": "menzoic@gmail.com"
    },
    {
      "name": "Matheus Marchini",
      "email": "matheusdot@gmail.com"
    },
    {
      "name": "Carlo Bernaschina"
    }
  ],
  "bugs": {
    "url": "https://github.com/niftylettuce/express-paginate/issues"
  },
  "license": "MIT",
  "homepage": "https://github.com/niftylettuce/express-paginate",
  "dependencies": {
    "lodash": "^2.4.1",
    "querystring": "^0.2.0"
  },
  "devDependencies": {
    "chai": "^1.9.1",
    "istanbul": "^0.3.0",
    "mocha": "^1.21.4"
  },
  "scripts": {
    "prepublish": "npm prune",
    "test": "mocha --reporter spec --bail --check-leaks --require test/support/should test/",
    "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks --require test/support/should  test/",
    "test-travis": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks --require test/support/should test/"
  },
  "readme": "\n# express-paginate\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nNode.js pagination middleware and view helpers.\n\nTo be used in combination with database pagination plugins such as [mongoose-paginate](https://github.com/edwardhotchkiss/mongoose-paginate).\n\n**This module was created namely for use with [Eskimo](http://eskimo.io)**\n\n\n## Install\n\n```bash\nnpm install -S express-paginate\n```\n\n\n## API\n\n```js\nvar paginate = require('express-paginate');\n```\n\n### paginate\n\nThis creates a new instance of `express-paginate`.\n\n\n### paginate.middleware(limit, maxLimit)\n\nThis middleware validates and supplies default values to `req.query.limit`, `req.query.page`, `res.locals.paginate`, `res.locals.hasPreviousPages`, and `res.locals.hasNextPages`.\n\n#### Arguments\n\n* `limit` a Number to limit results returned per page (defaults to `10`)\n* `maxLimit` a Number to restrict the number of results returned to per page (defaults to `50`) &ndash; through this, users will not be able to override this limit (e.g. they can't pass `?limit=10000` and crash your server)\n\n\n### paginate.href(req)\n\nWhen you use the `paginate` middleware, it injects a view helper function called `paginate.href` as `res.locals.paginate`, which you can use in your views for paginated hyperlinks (e.g. as the `href` in `<a>Prev</a>` or `<a>Next</a>`).\n\nBy default, the view helper `paginate.href` is already executed with the inherited `req` variable, therefore it becomes a function capable of returning a String when executed.\n\nWhen executed with `req`, it will return a function with two optional arguments, `prev` (Boolean) and `params` (String).\n\nThe argument `prev` is a Boolean and is completely optional (defaults to `false`).\n\nThe argument `params` is an Object and is completely optional.\n\nPass `true` as the value for `prev` when you want to create a `<button>` or `<a>` that points to the previous page (e.g. it would generate a URL such as the one in the `href` attribute of `<a href=\"/users?page=1&limit=10\">Prev</a>` if `req.query.page` is `2`).\n\nPass an object for the value of `params` when you want to override querystring parameters &ndash; such as for filtering and sorting (e.g. it would generate a URL such as the one in the `href` attribute of `<a href=\"/users?page=1&limit=10&sort=name\">Sort By Name</a>` if `params` is equal to `{ sort: 'name' }`.\n\nNote that if you pass only one argument with a type of Object, then it will generate a `href` with the current page and use the first argument as the value for `params`.  This is useful if you only want to do something like change the filter or sort querystring param, but not increase or decrease the page number.\n\n[See the example below for an example of how implementation looks](#example).\n\n#### Arguments\n\n* `req` (**required**) &ndash; the request object returned from Express middleware invocation\n\n#### Returned function arguments when invoked with `req`\n\n* `prev` (optional) &ndash; a Boolean to determine whether or not to increment the hyperlink returned by `1` (e.g. for \"Next\" page links)\n* `params` (optional) &ndash; an Object of querystring parameters that will override the current querystring in `req.query` (note that this will also override the `page` querystring value if `page` is present as a key in the `params` object) (e.g. if you want to make a link that allows the user to change the current querystring to sort by name, you would have `params` equal to `{ sort: 'name' }`)\n\n### paginate.hasPreviousPages\n\nWhen you use the `paginate` middleware, it injects a view helper Boolean called `hasPreviousPages` as `res.locals.hasPreviousPages`, which you can use in your views for generating pagination `<a>`'s or `<button>`'s &ndash; this utilizes `req.query.page > 1` to determine the Boolean's resulting value (representing if the query has a previous page of results)\n\n\n### paginate.hasNextPages(req)\n\nWhen you use the `paginate` middleware, it injects a view helper function called `hasNextPages` as `res.locals.hasPreviousPages`, which you can use in your views for generating pagination `<a>`'s or `<button>`'s &ndash; if the function is executed, it returns a Boolean value (representing if the query has another page of results)\n\nBy default, the view helper `paginate.hasNextPages` is already executed with the inherited `req` variable, therefore it becomes a function capable of returning a Boolean when executed.\n\nWhen executed with `req`, it will return a function that accepts two required arguments called `pageCount` and `resultsCount`.\n\n#### Arguments\n\n* `req` (**required**) &ndash; the request object returned from Express middleware invocation\n\n#### Returned function arguments when invoked with `req`\n\n* `pageCount` (**required**) &ndash; a Number representing the total number of pages for the given query executed on the page\n\n\n## Example\n\n```js\n\n// # app.js\n\nvar express = require('express');\nvar paginate = require('express-paginate');\n\n// keep this before all routes that will use pagination\napp.use(paginate.middleware(10, 50));\n\napp.get('/users', function(req, res, next) {\n\n  // This example assumes you've previously defined `Users`\n  // as `var Users = db.model('Users')` if you are using `mongoose`\n  // and that you've added the Mongoose plugin `mongoose-paginate`\n  // to the Users model via `User.plugin(require('mongoose-paginate'))`\n  Users.paginate({}, req.query.page, req.query.limit, function(err, pageCount, users, itemCount) {\n\n    if (err) return next(err);\n\n    res.format({\n      html: function() {\n        res.render('users', {\n          users: users,\n          pageCount: pageCount,\n          itemCount: itemCount\n        });\n      },\n      json: function() {\n        // inspired by Stripe's API response for list objects\n        res.json({\n          object: 'list',\n          has_more: paginate.hasNextPages(req)(pageCount),\n          data: users\n        });\n      }\n    });\n\n  });\n\n});\n\nvar app = express();\napp.listen(3000);\n```\n\n```jade\n\n//- users.jade\n\nh1 Users\n\n//- this will simply generate a link to sort by name\n//- note how we only have to pass the querystring param\n//- that we want to modify here, not the entire querystring\na(href=paginate.href({ sort: 'name' })) Sort by name\n\n//- this assumes you have `?age=1` or `?age=-1` in the querystring\n//- so this will basically negate the value and give you\n//- the opposite sorting order (desc with -1 or asc with 1)\na(href=paginate.href({ sort: req.query.age === '1' ? -1 : 1 })) Sort by age\n\nul\n  each user in users\n    li= user.email\n\ninclude _paginate\n```\n\n```jade\n\n//- _paginate.jade\n\n//- This examples makes use of Bootstrap 3.x pagination classes\n\nif paginate.hasPreviousPages || paginate.hasNextPages(pageCount)\n  .navigation.well-sm#pagination\n    ul.pager\n      if paginate.hasPreviousPages\n        li.previous\n          a(href=paginate.href(true)).prev\n            i.fa.fa-arrow-circle-left\n            |  Previous\n      if paginate.hasNextPages(pageCount)\n        li.next\n          a(href=paginate.href()).next\n            | Next&nbsp;\n            i.fa.fa-arrow-circle-right\n```\n\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/express-paginate.svg?style=flat\n[npm-url]: https://npmjs.org/package/express-paginate\n[travis-image]: https://img.shields.io/travis/expressjs/express-paginate.svg?style=flat\n[travis-url]: https://travis-ci.org/expressjs/express-paginate\n[coveralls-image]: https://img.shields.io/coveralls/expressjs/express-paginate.svg?style=flat\n[coveralls-url]: https://coveralls.io/r/expressjs/express-paginate?branch=master\n[downloads-image]: http://img.shields.io/npm/dm/express-paginate.svg?style=flat\n[downloads-url]: https://npmjs.org/package/express-paginate\n",
  "readmeFilename": "Readme.md",
  "_id": "express-paginate@0.0.5",
  "dist": {
    "shasum": "a7ddb562b6fbfe0f1247a397058322d000372526"
  },
  "_from": "express-paginate@",
  "_resolved": "https://registry.npmjs.org/express-paginate/-/express-paginate-0.0.5.tgz"
}
